// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class GrSimReplacement {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_grSim_RobotReplacement__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::grSim_RobotReplacement, global::grSim_RobotReplacement.Builder> internal__static_grSim_RobotReplacement__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_grSim_BallReplacement__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::grSim_BallReplacement, global::grSim_BallReplacement.Builder> internal__static_grSim_BallReplacement__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_grSim_Replacement__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::grSim_Replacement, global::grSim_Replacement.Builder> internal__static_grSim_Replacement__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static GrSimReplacement() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        "ChdnclNpbV9SZXBsYWNlbWVudC5wcm90byJbChZnclNpbV9Sb2JvdFJlcGxh" + 
        "Y2VtZW50EgkKAXgYASACKAESCQoBeRgCIAIoARILCgNkaXIYAyACKAESCgoC" + 
        "aWQYBCACKA0SEgoKeWVsbG93dGVhbRgFIAIoCCJFChVnclNpbV9CYWxsUmVw" + 
        "bGFjZW1lbnQSCQoBeBgBIAIoARIJCgF5GAIgAigBEgoKAnZ4GAMgAigBEgoK" + 
        "AnZ5GAQgAigBImIKEWdyU2ltX1JlcGxhY2VtZW50EiQKBGJhbGwYASABKAsy" + 
        "Fi5nclNpbV9CYWxsUmVwbGFjZW1lbnQSJwoGcm9ib3RzGAIgAygLMhcuZ3JT" + 
        "aW1fUm9ib3RSZXBsYWNlbWVudA==");
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_grSim_RobotReplacement__Descriptor = Descriptor.MessageTypes[0];
      internal__static_grSim_RobotReplacement__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::grSim_RobotReplacement, global::grSim_RobotReplacement.Builder>(internal__static_grSim_RobotReplacement__Descriptor,
              new string[] { "X", "Y", "Dir", "Id", "Yellowteam", });
      internal__static_grSim_BallReplacement__Descriptor = Descriptor.MessageTypes[1];
      internal__static_grSim_BallReplacement__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::grSim_BallReplacement, global::grSim_BallReplacement.Builder>(internal__static_grSim_BallReplacement__Descriptor,
              new string[] { "X", "Y", "Vx", "Vy", });
      internal__static_grSim_Replacement__Descriptor = Descriptor.MessageTypes[2];
      internal__static_grSim_Replacement__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::grSim_Replacement, global::grSim_Replacement.Builder>(internal__static_grSim_Replacement__Descriptor,
              new string[] { "Ball", "Robots", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class grSim_RobotReplacement : pb::GeneratedMessage<grSim_RobotReplacement, grSim_RobotReplacement.Builder> {
  private grSim_RobotReplacement() { }
  private static readonly grSim_RobotReplacement defaultInstance = new grSim_RobotReplacement().MakeReadOnly();
  private static readonly string[] _grSimRobotReplacementFieldNames = new string[] { "dir", "id", "x", "y", "yellowteam" };
  private static readonly uint[] _grSimRobotReplacementFieldTags = new uint[] { 25, 32, 9, 17, 40 };
  public static grSim_RobotReplacement DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override grSim_RobotReplacement DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override grSim_RobotReplacement ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::GrSimReplacement.internal__static_grSim_RobotReplacement__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<grSim_RobotReplacement, grSim_RobotReplacement.Builder> InternalFieldAccessors {
    get { return global::GrSimReplacement.internal__static_grSim_RobotReplacement__FieldAccessorTable; }
  }
  
  public const int XFieldNumber = 1;
  private bool hasX;
  private double x_;
  public bool HasX {
    get { return hasX; }
  }
  public double X {
    get { return x_; }
  }
  
  public const int YFieldNumber = 2;
  private bool hasY;
  private double y_;
  public bool HasY {
    get { return hasY; }
  }
  public double Y {
    get { return y_; }
  }
  
  public const int DirFieldNumber = 3;
  private bool hasDir;
  private double dir_;
  public bool HasDir {
    get { return hasDir; }
  }
  public double Dir {
    get { return dir_; }
  }
  
  public const int IdFieldNumber = 4;
  private bool hasId;
  private uint id_;
  public bool HasId {
    get { return hasId; }
  }
  [global::System.CLSCompliant(false)]
  public uint Id {
    get { return id_; }
  }
  
  public const int YellowteamFieldNumber = 5;
  private bool hasYellowteam;
  private bool yellowteam_;
  public bool HasYellowteam {
    get { return hasYellowteam; }
  }
  public bool Yellowteam {
    get { return yellowteam_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasX) return false;
      if (!hasY) return false;
      if (!hasDir) return false;
      if (!hasId) return false;
      if (!hasYellowteam) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _grSimRobotReplacementFieldNames;
    if (hasX) {
      output.WriteDouble(1, field_names[2], X);
    }
    if (hasY) {
      output.WriteDouble(2, field_names[3], Y);
    }
    if (hasDir) {
      output.WriteDouble(3, field_names[0], Dir);
    }
    if (hasId) {
      output.WriteUInt32(4, field_names[1], Id);
    }
    if (hasYellowteam) {
      output.WriteBool(5, field_names[4], Yellowteam);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeDoubleSize(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, Y);
      }
      if (hasDir) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, Dir);
      }
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Id);
      }
      if (hasYellowteam) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Yellowteam);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static grSim_RobotReplacement ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static grSim_RobotReplacement ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static grSim_RobotReplacement ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static grSim_RobotReplacement ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static grSim_RobotReplacement ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static grSim_RobotReplacement ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static grSim_RobotReplacement ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static grSim_RobotReplacement ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static grSim_RobotReplacement ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static grSim_RobotReplacement ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private grSim_RobotReplacement MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(grSim_RobotReplacement prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<grSim_RobotReplacement, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(grSim_RobotReplacement cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private grSim_RobotReplacement result;
    
    private grSim_RobotReplacement PrepareBuilder() {
      if (resultIsReadOnly) {
        grSim_RobotReplacement original = result;
        result = new grSim_RobotReplacement();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override grSim_RobotReplacement MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::grSim_RobotReplacement.Descriptor; }
    }
    
    public override grSim_RobotReplacement DefaultInstanceForType {
      get { return global::grSim_RobotReplacement.DefaultInstance; }
    }
    
    public override grSim_RobotReplacement BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is grSim_RobotReplacement) {
        return MergeFrom((grSim_RobotReplacement) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(grSim_RobotReplacement other) {
      if (other == global::grSim_RobotReplacement.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasDir) {
        Dir = other.Dir;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasYellowteam) {
        Yellowteam = other.Yellowteam;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_grSimRobotReplacementFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _grSimRobotReplacementFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasX = input.ReadDouble(ref result.x_);
            break;
          }
          case 17: {
            result.hasY = input.ReadDouble(ref result.y_);
            break;
          }
          case 25: {
            result.hasDir = input.ReadDouble(ref result.dir_);
            break;
          }
          case 32: {
            result.hasId = input.ReadUInt32(ref result.id_);
            break;
          }
          case 40: {
            result.hasYellowteam = input.ReadBool(ref result.yellowteam_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasX {
      get { return result.hasX; }
    }
    public double X {
      get { return result.X; }
      set { SetX(value); }
    }
    public Builder SetX(double value) {
      PrepareBuilder();
      result.hasX = true;
      result.x_ = value;
      return this;
    }
    public Builder ClearX() {
      PrepareBuilder();
      result.hasX = false;
      result.x_ = 0D;
      return this;
    }
    
    public bool HasY {
      get { return result.hasY; }
    }
    public double Y {
      get { return result.Y; }
      set { SetY(value); }
    }
    public Builder SetY(double value) {
      PrepareBuilder();
      result.hasY = true;
      result.y_ = value;
      return this;
    }
    public Builder ClearY() {
      PrepareBuilder();
      result.hasY = false;
      result.y_ = 0D;
      return this;
    }
    
    public bool HasDir {
      get { return result.hasDir; }
    }
    public double Dir {
      get { return result.Dir; }
      set { SetDir(value); }
    }
    public Builder SetDir(double value) {
      PrepareBuilder();
      result.hasDir = true;
      result.dir_ = value;
      return this;
    }
    public Builder ClearDir() {
      PrepareBuilder();
      result.hasDir = false;
      result.dir_ = 0D;
      return this;
    }
    
    public bool HasId {
      get { return result.hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetId(uint value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
    
    public bool HasYellowteam {
      get { return result.hasYellowteam; }
    }
    public bool Yellowteam {
      get { return result.Yellowteam; }
      set { SetYellowteam(value); }
    }
    public Builder SetYellowteam(bool value) {
      PrepareBuilder();
      result.hasYellowteam = true;
      result.yellowteam_ = value;
      return this;
    }
    public Builder ClearYellowteam() {
      PrepareBuilder();
      result.hasYellowteam = false;
      result.yellowteam_ = false;
      return this;
    }
  }
  static grSim_RobotReplacement() {
    object.ReferenceEquals(global::GrSimReplacement.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class grSim_BallReplacement : pb::GeneratedMessage<grSim_BallReplacement, grSim_BallReplacement.Builder> {
  private grSim_BallReplacement() { }
  private static readonly grSim_BallReplacement defaultInstance = new grSim_BallReplacement().MakeReadOnly();
  private static readonly string[] _grSimBallReplacementFieldNames = new string[] { "vx", "vy", "x", "y" };
  private static readonly uint[] _grSimBallReplacementFieldTags = new uint[] { 25, 33, 9, 17 };
  public static grSim_BallReplacement DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override grSim_BallReplacement DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override grSim_BallReplacement ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::GrSimReplacement.internal__static_grSim_BallReplacement__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<grSim_BallReplacement, grSim_BallReplacement.Builder> InternalFieldAccessors {
    get { return global::GrSimReplacement.internal__static_grSim_BallReplacement__FieldAccessorTable; }
  }
  
  public const int XFieldNumber = 1;
  private bool hasX;
  private double x_;
  public bool HasX {
    get { return hasX; }
  }
  public double X {
    get { return x_; }
  }
  
  public const int YFieldNumber = 2;
  private bool hasY;
  private double y_;
  public bool HasY {
    get { return hasY; }
  }
  public double Y {
    get { return y_; }
  }
  
  public const int VxFieldNumber = 3;
  private bool hasVx;
  private double vx_;
  public bool HasVx {
    get { return hasVx; }
  }
  public double Vx {
    get { return vx_; }
  }
  
  public const int VyFieldNumber = 4;
  private bool hasVy;
  private double vy_;
  public bool HasVy {
    get { return hasVy; }
  }
  public double Vy {
    get { return vy_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasX) return false;
      if (!hasY) return false;
      if (!hasVx) return false;
      if (!hasVy) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _grSimBallReplacementFieldNames;
    if (hasX) {
      output.WriteDouble(1, field_names[2], X);
    }
    if (hasY) {
      output.WriteDouble(2, field_names[3], Y);
    }
    if (hasVx) {
      output.WriteDouble(3, field_names[0], Vx);
    }
    if (hasVy) {
      output.WriteDouble(4, field_names[1], Vy);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeDoubleSize(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeDoubleSize(2, Y);
      }
      if (hasVx) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, Vx);
      }
      if (hasVy) {
        size += pb::CodedOutputStream.ComputeDoubleSize(4, Vy);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static grSim_BallReplacement ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static grSim_BallReplacement ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static grSim_BallReplacement ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static grSim_BallReplacement ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static grSim_BallReplacement ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static grSim_BallReplacement ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static grSim_BallReplacement ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static grSim_BallReplacement ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static grSim_BallReplacement ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static grSim_BallReplacement ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private grSim_BallReplacement MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(grSim_BallReplacement prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<grSim_BallReplacement, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(grSim_BallReplacement cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private grSim_BallReplacement result;
    
    private grSim_BallReplacement PrepareBuilder() {
      if (resultIsReadOnly) {
        grSim_BallReplacement original = result;
        result = new grSim_BallReplacement();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override grSim_BallReplacement MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::grSim_BallReplacement.Descriptor; }
    }
    
    public override grSim_BallReplacement DefaultInstanceForType {
      get { return global::grSim_BallReplacement.DefaultInstance; }
    }
    
    public override grSim_BallReplacement BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is grSim_BallReplacement) {
        return MergeFrom((grSim_BallReplacement) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(grSim_BallReplacement other) {
      if (other == global::grSim_BallReplacement.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasVx) {
        Vx = other.Vx;
      }
      if (other.HasVy) {
        Vy = other.Vy;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_grSimBallReplacementFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _grSimBallReplacementFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasX = input.ReadDouble(ref result.x_);
            break;
          }
          case 17: {
            result.hasY = input.ReadDouble(ref result.y_);
            break;
          }
          case 25: {
            result.hasVx = input.ReadDouble(ref result.vx_);
            break;
          }
          case 33: {
            result.hasVy = input.ReadDouble(ref result.vy_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasX {
      get { return result.hasX; }
    }
    public double X {
      get { return result.X; }
      set { SetX(value); }
    }
    public Builder SetX(double value) {
      PrepareBuilder();
      result.hasX = true;
      result.x_ = value;
      return this;
    }
    public Builder ClearX() {
      PrepareBuilder();
      result.hasX = false;
      result.x_ = 0D;
      return this;
    }
    
    public bool HasY {
      get { return result.hasY; }
    }
    public double Y {
      get { return result.Y; }
      set { SetY(value); }
    }
    public Builder SetY(double value) {
      PrepareBuilder();
      result.hasY = true;
      result.y_ = value;
      return this;
    }
    public Builder ClearY() {
      PrepareBuilder();
      result.hasY = false;
      result.y_ = 0D;
      return this;
    }
    
    public bool HasVx {
      get { return result.hasVx; }
    }
    public double Vx {
      get { return result.Vx; }
      set { SetVx(value); }
    }
    public Builder SetVx(double value) {
      PrepareBuilder();
      result.hasVx = true;
      result.vx_ = value;
      return this;
    }
    public Builder ClearVx() {
      PrepareBuilder();
      result.hasVx = false;
      result.vx_ = 0D;
      return this;
    }
    
    public bool HasVy {
      get { return result.hasVy; }
    }
    public double Vy {
      get { return result.Vy; }
      set { SetVy(value); }
    }
    public Builder SetVy(double value) {
      PrepareBuilder();
      result.hasVy = true;
      result.vy_ = value;
      return this;
    }
    public Builder ClearVy() {
      PrepareBuilder();
      result.hasVy = false;
      result.vy_ = 0D;
      return this;
    }
  }
  static grSim_BallReplacement() {
    object.ReferenceEquals(global::GrSimReplacement.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class grSim_Replacement : pb::GeneratedMessage<grSim_Replacement, grSim_Replacement.Builder> {
  private grSim_Replacement() { }
  private static readonly grSim_Replacement defaultInstance = new grSim_Replacement().MakeReadOnly();
  private static readonly string[] _grSimReplacementFieldNames = new string[] { "ball", "robots" };
  private static readonly uint[] _grSimReplacementFieldTags = new uint[] { 10, 18 };
  public static grSim_Replacement DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override grSim_Replacement DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override grSim_Replacement ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::GrSimReplacement.internal__static_grSim_Replacement__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<grSim_Replacement, grSim_Replacement.Builder> InternalFieldAccessors {
    get { return global::GrSimReplacement.internal__static_grSim_Replacement__FieldAccessorTable; }
  }
  
  public const int BallFieldNumber = 1;
  private bool hasBall;
  private global::grSim_BallReplacement ball_;
  public bool HasBall {
    get { return hasBall; }
  }
  public global::grSim_BallReplacement Ball {
    get { return ball_ ?? global::grSim_BallReplacement.DefaultInstance; }
  }
  
  public const int RobotsFieldNumber = 2;
  private pbc::PopsicleList<global::grSim_RobotReplacement> robots_ = new pbc::PopsicleList<global::grSim_RobotReplacement>();
  public scg::IList<global::grSim_RobotReplacement> RobotsList {
    get { return robots_; }
  }
  public int RobotsCount {
    get { return robots_.Count; }
  }
  public global::grSim_RobotReplacement GetRobots(int index) {
    return robots_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (HasBall) {
        if (!Ball.IsInitialized) return false;
      }
      foreach (global::grSim_RobotReplacement element in RobotsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _grSimReplacementFieldNames;
    if (hasBall) {
      output.WriteMessage(1, field_names[0], Ball);
    }
    if (robots_.Count > 0) {
      output.WriteMessageArray(2, field_names[1], robots_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBall) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Ball);
      }
      foreach (global::grSim_RobotReplacement element in RobotsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static grSim_Replacement ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static grSim_Replacement ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static grSim_Replacement ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static grSim_Replacement ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static grSim_Replacement ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static grSim_Replacement ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static grSim_Replacement ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static grSim_Replacement ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static grSim_Replacement ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static grSim_Replacement ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private grSim_Replacement MakeReadOnly() {
    robots_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(grSim_Replacement prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<grSim_Replacement, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(grSim_Replacement cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private grSim_Replacement result;
    
    private grSim_Replacement PrepareBuilder() {
      if (resultIsReadOnly) {
        grSim_Replacement original = result;
        result = new grSim_Replacement();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override grSim_Replacement MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::grSim_Replacement.Descriptor; }
    }
    
    public override grSim_Replacement DefaultInstanceForType {
      get { return global::grSim_Replacement.DefaultInstance; }
    }
    
    public override grSim_Replacement BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is grSim_Replacement) {
        return MergeFrom((grSim_Replacement) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(grSim_Replacement other) {
      if (other == global::grSim_Replacement.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBall) {
        MergeBall(other.Ball);
      }
      if (other.robots_.Count != 0) {
        result.robots_.Add(other.robots_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_grSimReplacementFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _grSimReplacementFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::grSim_BallReplacement.Builder subBuilder = global::grSim_BallReplacement.CreateBuilder();
            if (result.hasBall) {
              subBuilder.MergeFrom(Ball);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Ball = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.robots_, global::grSim_RobotReplacement.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBall {
     get { return result.hasBall; }
    }
    public global::grSim_BallReplacement Ball {
      get { return result.Ball; }
      set { SetBall(value); }
    }
    public Builder SetBall(global::grSim_BallReplacement value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBall = true;
      result.ball_ = value;
      return this;
    }
    public Builder SetBall(global::grSim_BallReplacement.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasBall = true;
      result.ball_ = builderForValue.Build();
      return this;
    }
    public Builder MergeBall(global::grSim_BallReplacement value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasBall &&
          result.ball_ != global::grSim_BallReplacement.DefaultInstance) {
          result.ball_ = global::grSim_BallReplacement.CreateBuilder(result.ball_).MergeFrom(value).BuildPartial();
      } else {
        result.ball_ = value;
      }
      result.hasBall = true;
      return this;
    }
    public Builder ClearBall() {
      PrepareBuilder();
      result.hasBall = false;
      result.ball_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::grSim_RobotReplacement> RobotsList {
      get { return PrepareBuilder().robots_; }
    }
    public int RobotsCount {
      get { return result.RobotsCount; }
    }
    public global::grSim_RobotReplacement GetRobots(int index) {
      return result.GetRobots(index);
    }
    public Builder SetRobots(int index, global::grSim_RobotReplacement value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.robots_[index] = value;
      return this;
    }
    public Builder SetRobots(int index, global::grSim_RobotReplacement.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.robots_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRobots(global::grSim_RobotReplacement value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.robots_.Add(value);
      return this;
    }
    public Builder AddRobots(global::grSim_RobotReplacement.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.robots_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRobots(scg::IEnumerable<global::grSim_RobotReplacement> values) {
      PrepareBuilder();
      result.robots_.Add(values);
      return this;
    }
    public Builder ClearRobots() {
      PrepareBuilder();
      result.robots_.Clear();
      return this;
    }
  }
  static grSim_Replacement() {
    object.ReferenceEquals(global::GrSimReplacement.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
