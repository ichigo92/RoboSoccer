// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class GrSimCommands {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_grSim_Robot_Command__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::grSim_Robot_Command, global::grSim_Robot_Command.Builder> internal__static_grSim_Robot_Command__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_grSim_Commands__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::grSim_Commands, global::grSim_Commands.Builder> internal__static_grSim_Commands__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static GrSimCommands() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        "ChRnclNpbV9Db21tYW5kcy5wcm90byLqAQoTZ3JTaW1fUm9ib3RfQ29tbWFu" + 
        "ZBIKCgJpZBgBIAIoDRISCgpraWNrc3BlZWR4GAIgAigCEhIKCmtpY2tzcGVl" + 
        "ZHoYAyACKAISEgoKdmVsdGFuZ2VudBgEIAIoAhIRCgl2ZWxub3JtYWwYBSAC" + 
        "KAISEgoKdmVsYW5ndWxhchgGIAIoAhIPCgdzcGlubmVyGAcgAigIEhMKC3do" + 
        "ZWVsc3NwZWVkGAggAigIEg4KBndoZWVsMRgJIAEoAhIOCgZ3aGVlbDIYCiAB" + 
        "KAISDgoGd2hlZWwzGAsgASgCEg4KBndoZWVsNBgMIAEoAiJnCg5nclNpbV9D" + 
        "b21tYW5kcxIRCgl0aW1lc3RhbXAYASACKAESFAoMaXN0ZWFteWVsbG93GAIg" + 
        "AigIEiwKDnJvYm90X2NvbW1hbmRzGAMgAygLMhQuZ3JTaW1fUm9ib3RfQ29t" + 
        "bWFuZA==");
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_grSim_Robot_Command__Descriptor = Descriptor.MessageTypes[0];
      internal__static_grSim_Robot_Command__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::grSim_Robot_Command, global::grSim_Robot_Command.Builder>(internal__static_grSim_Robot_Command__Descriptor,
              new string[] { "Id", "Kickspeedx", "Kickspeedz", "Veltangent", "Velnormal", "Velangular", "Spinner", "Wheelsspeed", "Wheel1", "Wheel2", "Wheel3", "Wheel4", });
      internal__static_grSim_Commands__Descriptor = Descriptor.MessageTypes[1];
      internal__static_grSim_Commands__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::grSim_Commands, global::grSim_Commands.Builder>(internal__static_grSim_Commands__Descriptor,
              new string[] { "Timestamp", "Isteamyellow", "RobotCommands", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class grSim_Robot_Command : pb::GeneratedMessage<grSim_Robot_Command, grSim_Robot_Command.Builder> {
  private grSim_Robot_Command() { }
  private static readonly grSim_Robot_Command defaultInstance = new grSim_Robot_Command().MakeReadOnly();
  private static readonly string[] _grSimRobotCommandFieldNames = new string[] { "id", "kickspeedx", "kickspeedz", "spinner", "velangular", "velnormal", "veltangent", "wheel1", "wheel2", "wheel3", "wheel4", "wheelsspeed" };
  private static readonly uint[] _grSimRobotCommandFieldTags = new uint[] { 8, 21, 29, 56, 53, 45, 37, 77, 85, 93, 101, 64 };
  public static grSim_Robot_Command DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override grSim_Robot_Command DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override grSim_Robot_Command ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::GrSimCommands.internal__static_grSim_Robot_Command__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<grSim_Robot_Command, grSim_Robot_Command.Builder> InternalFieldAccessors {
    get { return global::GrSimCommands.internal__static_grSim_Robot_Command__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private uint id_;
  public bool HasId {
    get { return hasId; }
  }
  [global::System.CLSCompliant(false)]
  public uint Id {
    get { return id_; }
  }
  
  public const int KickspeedxFieldNumber = 2;
  private bool hasKickspeedx;
  private float kickspeedx_;
  public bool HasKickspeedx {
    get { return hasKickspeedx; }
  }
  public float Kickspeedx {
    get { return kickspeedx_; }
  }
  
  public const int KickspeedzFieldNumber = 3;
  private bool hasKickspeedz;
  private float kickspeedz_;
  public bool HasKickspeedz {
    get { return hasKickspeedz; }
  }
  public float Kickspeedz {
    get { return kickspeedz_; }
  }
  
  public const int VeltangentFieldNumber = 4;
  private bool hasVeltangent;
  private float veltangent_;
  public bool HasVeltangent {
    get { return hasVeltangent; }
  }
  public float Veltangent {
    get { return veltangent_; }
  }
  
  public const int VelnormalFieldNumber = 5;
  private bool hasVelnormal;
  private float velnormal_;
  public bool HasVelnormal {
    get { return hasVelnormal; }
  }
  public float Velnormal {
    get { return velnormal_; }
  }
  
  public const int VelangularFieldNumber = 6;
  private bool hasVelangular;
  private float velangular_;
  public bool HasVelangular {
    get { return hasVelangular; }
  }
  public float Velangular {
    get { return velangular_; }
  }
  
  public const int SpinnerFieldNumber = 7;
  private bool hasSpinner;
  private bool spinner_;
  public bool HasSpinner {
    get { return hasSpinner; }
  }
  public bool Spinner {
    get { return spinner_; }
  }
  
  public const int WheelsspeedFieldNumber = 8;
  private bool hasWheelsspeed;
  private bool wheelsspeed_;
  public bool HasWheelsspeed {
    get { return hasWheelsspeed; }
  }
  public bool Wheelsspeed {
    get { return wheelsspeed_; }
  }
  
  public const int Wheel1FieldNumber = 9;
  private bool hasWheel1;
  private float wheel1_;
  public bool HasWheel1 {
    get { return hasWheel1; }
  }
  public float Wheel1 {
    get { return wheel1_; }
  }
  
  public const int Wheel2FieldNumber = 10;
  private bool hasWheel2;
  private float wheel2_;
  public bool HasWheel2 {
    get { return hasWheel2; }
  }
  public float Wheel2 {
    get { return wheel2_; }
  }
  
  public const int Wheel3FieldNumber = 11;
  private bool hasWheel3;
  private float wheel3_;
  public bool HasWheel3 {
    get { return hasWheel3; }
  }
  public float Wheel3 {
    get { return wheel3_; }
  }
  
  public const int Wheel4FieldNumber = 12;
  private bool hasWheel4;
  private float wheel4_;
  public bool HasWheel4 {
    get { return hasWheel4; }
  }
  public float Wheel4 {
    get { return wheel4_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      if (!hasKickspeedx) return false;
      if (!hasKickspeedz) return false;
      if (!hasVeltangent) return false;
      if (!hasVelnormal) return false;
      if (!hasVelangular) return false;
      if (!hasSpinner) return false;
      if (!hasWheelsspeed) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _grSimRobotCommandFieldNames;
    if (hasId) {
      output.WriteUInt32(1, field_names[0], Id);
    }
    if (hasKickspeedx) {
      output.WriteFloat(2, field_names[1], Kickspeedx);
    }
    if (hasKickspeedz) {
      output.WriteFloat(3, field_names[2], Kickspeedz);
    }
    if (hasVeltangent) {
      output.WriteFloat(4, field_names[6], Veltangent);
    }
    if (hasVelnormal) {
      output.WriteFloat(5, field_names[5], Velnormal);
    }
    if (hasVelangular) {
      output.WriteFloat(6, field_names[4], Velangular);
    }
    if (hasSpinner) {
      output.WriteBool(7, field_names[3], Spinner);
    }
    if (hasWheelsspeed) {
      output.WriteBool(8, field_names[11], Wheelsspeed);
    }
    if (hasWheel1) {
      output.WriteFloat(9, field_names[7], Wheel1);
    }
    if (hasWheel2) {
      output.WriteFloat(10, field_names[8], Wheel2);
    }
    if (hasWheel3) {
      output.WriteFloat(11, field_names[9], Wheel3);
    }
    if (hasWheel4) {
      output.WriteFloat(12, field_names[10], Wheel4);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      if (hasKickspeedx) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Kickspeedx);
      }
      if (hasKickspeedz) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, Kickspeedz);
      }
      if (hasVeltangent) {
        size += pb::CodedOutputStream.ComputeFloatSize(4, Veltangent);
      }
      if (hasVelnormal) {
        size += pb::CodedOutputStream.ComputeFloatSize(5, Velnormal);
      }
      if (hasVelangular) {
        size += pb::CodedOutputStream.ComputeFloatSize(6, Velangular);
      }
      if (hasSpinner) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, Spinner);
      }
      if (hasWheelsspeed) {
        size += pb::CodedOutputStream.ComputeBoolSize(8, Wheelsspeed);
      }
      if (hasWheel1) {
        size += pb::CodedOutputStream.ComputeFloatSize(9, Wheel1);
      }
      if (hasWheel2) {
        size += pb::CodedOutputStream.ComputeFloatSize(10, Wheel2);
      }
      if (hasWheel3) {
        size += pb::CodedOutputStream.ComputeFloatSize(11, Wheel3);
      }
      if (hasWheel4) {
        size += pb::CodedOutputStream.ComputeFloatSize(12, Wheel4);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static grSim_Robot_Command ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static grSim_Robot_Command ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static grSim_Robot_Command ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static grSim_Robot_Command ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static grSim_Robot_Command ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static grSim_Robot_Command ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static grSim_Robot_Command ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static grSim_Robot_Command ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static grSim_Robot_Command ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static grSim_Robot_Command ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private grSim_Robot_Command MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(grSim_Robot_Command prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<grSim_Robot_Command, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(grSim_Robot_Command cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private grSim_Robot_Command result;
    
    private grSim_Robot_Command PrepareBuilder() {
      if (resultIsReadOnly) {
        grSim_Robot_Command original = result;
        result = new grSim_Robot_Command();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override grSim_Robot_Command MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::grSim_Robot_Command.Descriptor; }
    }
    
    public override grSim_Robot_Command DefaultInstanceForType {
      get { return global::grSim_Robot_Command.DefaultInstance; }
    }
    
    public override grSim_Robot_Command BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is grSim_Robot_Command) {
        return MergeFrom((grSim_Robot_Command) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(grSim_Robot_Command other) {
      if (other == global::grSim_Robot_Command.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasKickspeedx) {
        Kickspeedx = other.Kickspeedx;
      }
      if (other.HasKickspeedz) {
        Kickspeedz = other.Kickspeedz;
      }
      if (other.HasVeltangent) {
        Veltangent = other.Veltangent;
      }
      if (other.HasVelnormal) {
        Velnormal = other.Velnormal;
      }
      if (other.HasVelangular) {
        Velangular = other.Velangular;
      }
      if (other.HasSpinner) {
        Spinner = other.Spinner;
      }
      if (other.HasWheelsspeed) {
        Wheelsspeed = other.Wheelsspeed;
      }
      if (other.HasWheel1) {
        Wheel1 = other.Wheel1;
      }
      if (other.HasWheel2) {
        Wheel2 = other.Wheel2;
      }
      if (other.HasWheel3) {
        Wheel3 = other.Wheel3;
      }
      if (other.HasWheel4) {
        Wheel4 = other.Wheel4;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_grSimRobotCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _grSimRobotCommandFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadUInt32(ref result.id_);
            break;
          }
          case 21: {
            result.hasKickspeedx = input.ReadFloat(ref result.kickspeedx_);
            break;
          }
          case 29: {
            result.hasKickspeedz = input.ReadFloat(ref result.kickspeedz_);
            break;
          }
          case 37: {
            result.hasVeltangent = input.ReadFloat(ref result.veltangent_);
            break;
          }
          case 45: {
            result.hasVelnormal = input.ReadFloat(ref result.velnormal_);
            break;
          }
          case 53: {
            result.hasVelangular = input.ReadFloat(ref result.velangular_);
            break;
          }
          case 56: {
            result.hasSpinner = input.ReadBool(ref result.spinner_);
            break;
          }
          case 64: {
            result.hasWheelsspeed = input.ReadBool(ref result.wheelsspeed_);
            break;
          }
          case 77: {
            result.hasWheel1 = input.ReadFloat(ref result.wheel1_);
            break;
          }
          case 85: {
            result.hasWheel2 = input.ReadFloat(ref result.wheel2_);
            break;
          }
          case 93: {
            result.hasWheel3 = input.ReadFloat(ref result.wheel3_);
            break;
          }
          case 101: {
            result.hasWheel4 = input.ReadFloat(ref result.wheel4_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetId(uint value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
    
    public bool HasKickspeedx {
      get { return result.hasKickspeedx; }
    }
    public float Kickspeedx {
      get { return result.Kickspeedx; }
      set { SetKickspeedx(value); }
    }
    public Builder SetKickspeedx(float value) {
      PrepareBuilder();
      result.hasKickspeedx = true;
      result.kickspeedx_ = value;
      return this;
    }
    public Builder ClearKickspeedx() {
      PrepareBuilder();
      result.hasKickspeedx = false;
      result.kickspeedx_ = 0F;
      return this;
    }
    
    public bool HasKickspeedz {
      get { return result.hasKickspeedz; }
    }
    public float Kickspeedz {
      get { return result.Kickspeedz; }
      set { SetKickspeedz(value); }
    }
    public Builder SetKickspeedz(float value) {
      PrepareBuilder();
      result.hasKickspeedz = true;
      result.kickspeedz_ = value;
      return this;
    }
    public Builder ClearKickspeedz() {
      PrepareBuilder();
      result.hasKickspeedz = false;
      result.kickspeedz_ = 0F;
      return this;
    }
    
    public bool HasVeltangent {
      get { return result.hasVeltangent; }
    }
    public float Veltangent {
      get { return result.Veltangent; }
      set { SetVeltangent(value); }
    }
    public Builder SetVeltangent(float value) {
      PrepareBuilder();
      result.hasVeltangent = true;
      result.veltangent_ = value;
      return this;
    }
    public Builder ClearVeltangent() {
      PrepareBuilder();
      result.hasVeltangent = false;
      result.veltangent_ = 0F;
      return this;
    }
    
    public bool HasVelnormal {
      get { return result.hasVelnormal; }
    }
    public float Velnormal {
      get { return result.Velnormal; }
      set { SetVelnormal(value); }
    }
    public Builder SetVelnormal(float value) {
      PrepareBuilder();
      result.hasVelnormal = true;
      result.velnormal_ = value;
      return this;
    }
    public Builder ClearVelnormal() {
      PrepareBuilder();
      result.hasVelnormal = false;
      result.velnormal_ = 0F;
      return this;
    }
    
    public bool HasVelangular {
      get { return result.hasVelangular; }
    }
    public float Velangular {
      get { return result.Velangular; }
      set { SetVelangular(value); }
    }
    public Builder SetVelangular(float value) {
      PrepareBuilder();
      result.hasVelangular = true;
      result.velangular_ = value;
      return this;
    }
    public Builder ClearVelangular() {
      PrepareBuilder();
      result.hasVelangular = false;
      result.velangular_ = 0F;
      return this;
    }
    
    public bool HasSpinner {
      get { return result.hasSpinner; }
    }
    public bool Spinner {
      get { return result.Spinner; }
      set { SetSpinner(value); }
    }
    public Builder SetSpinner(bool value) {
      PrepareBuilder();
      result.hasSpinner = true;
      result.spinner_ = value;
      return this;
    }
    public Builder ClearSpinner() {
      PrepareBuilder();
      result.hasSpinner = false;
      result.spinner_ = false;
      return this;
    }
    
    public bool HasWheelsspeed {
      get { return result.hasWheelsspeed; }
    }
    public bool Wheelsspeed {
      get { return result.Wheelsspeed; }
      set { SetWheelsspeed(value); }
    }
    public Builder SetWheelsspeed(bool value) {
      PrepareBuilder();
      result.hasWheelsspeed = true;
      result.wheelsspeed_ = value;
      return this;
    }
    public Builder ClearWheelsspeed() {
      PrepareBuilder();
      result.hasWheelsspeed = false;
      result.wheelsspeed_ = false;
      return this;
    }
    
    public bool HasWheel1 {
      get { return result.hasWheel1; }
    }
    public float Wheel1 {
      get { return result.Wheel1; }
      set { SetWheel1(value); }
    }
    public Builder SetWheel1(float value) {
      PrepareBuilder();
      result.hasWheel1 = true;
      result.wheel1_ = value;
      return this;
    }
    public Builder ClearWheel1() {
      PrepareBuilder();
      result.hasWheel1 = false;
      result.wheel1_ = 0F;
      return this;
    }
    
    public bool HasWheel2 {
      get { return result.hasWheel2; }
    }
    public float Wheel2 {
      get { return result.Wheel2; }
      set { SetWheel2(value); }
    }
    public Builder SetWheel2(float value) {
      PrepareBuilder();
      result.hasWheel2 = true;
      result.wheel2_ = value;
      return this;
    }
    public Builder ClearWheel2() {
      PrepareBuilder();
      result.hasWheel2 = false;
      result.wheel2_ = 0F;
      return this;
    }
    
    public bool HasWheel3 {
      get { return result.hasWheel3; }
    }
    public float Wheel3 {
      get { return result.Wheel3; }
      set { SetWheel3(value); }
    }
    public Builder SetWheel3(float value) {
      PrepareBuilder();
      result.hasWheel3 = true;
      result.wheel3_ = value;
      return this;
    }
    public Builder ClearWheel3() {
      PrepareBuilder();
      result.hasWheel3 = false;
      result.wheel3_ = 0F;
      return this;
    }
    
    public bool HasWheel4 {
      get { return result.hasWheel4; }
    }
    public float Wheel4 {
      get { return result.Wheel4; }
      set { SetWheel4(value); }
    }
    public Builder SetWheel4(float value) {
      PrepareBuilder();
      result.hasWheel4 = true;
      result.wheel4_ = value;
      return this;
    }
    public Builder ClearWheel4() {
      PrepareBuilder();
      result.hasWheel4 = false;
      result.wheel4_ = 0F;
      return this;
    }
  }
  static grSim_Robot_Command() {
    object.ReferenceEquals(global::GrSimCommands.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class grSim_Commands : pb::GeneratedMessage<grSim_Commands, grSim_Commands.Builder> {
  private grSim_Commands() { }
  private static readonly grSim_Commands defaultInstance = new grSim_Commands().MakeReadOnly();
  private static readonly string[] _grSimCommandsFieldNames = new string[] { "isteamyellow", "robot_commands", "timestamp" };
  private static readonly uint[] _grSimCommandsFieldTags = new uint[] { 16, 26, 9 };
  public static grSim_Commands DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override grSim_Commands DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override grSim_Commands ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::GrSimCommands.internal__static_grSim_Commands__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<grSim_Commands, grSim_Commands.Builder> InternalFieldAccessors {
    get { return global::GrSimCommands.internal__static_grSim_Commands__FieldAccessorTable; }
  }
  
  public const int TimestampFieldNumber = 1;
  private bool hasTimestamp;
  private double timestamp_;
  public bool HasTimestamp {
    get { return hasTimestamp; }
  }
  public double Timestamp {
    get { return timestamp_; }
  }
  
  public const int IsteamyellowFieldNumber = 2;
  private bool hasIsteamyellow;
  private bool isteamyellow_;
  public bool HasIsteamyellow {
    get { return hasIsteamyellow; }
  }
  public bool Isteamyellow {
    get { return isteamyellow_; }
  }
  
  public const int RobotCommandsFieldNumber = 3;
  private pbc::PopsicleList<global::grSim_Robot_Command> robotCommands_ = new pbc::PopsicleList<global::grSim_Robot_Command>();
  public scg::IList<global::grSim_Robot_Command> RobotCommandsList {
    get { return robotCommands_; }
  }
  public int RobotCommandsCount {
    get { return robotCommands_.Count; }
  }
  public global::grSim_Robot_Command GetRobotCommands(int index) {
    return robotCommands_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasTimestamp) return false;
      if (!hasIsteamyellow) return false;
      foreach (global::grSim_Robot_Command element in RobotCommandsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _grSimCommandsFieldNames;
    if (hasTimestamp) {
      output.WriteDouble(1, field_names[2], Timestamp);
    }
    if (hasIsteamyellow) {
      output.WriteBool(2, field_names[0], Isteamyellow);
    }
    if (robotCommands_.Count > 0) {
      output.WriteMessageArray(3, field_names[1], robotCommands_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeDoubleSize(1, Timestamp);
      }
      if (hasIsteamyellow) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Isteamyellow);
      }
      foreach (global::grSim_Robot_Command element in RobotCommandsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static grSim_Commands ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static grSim_Commands ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static grSim_Commands ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static grSim_Commands ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static grSim_Commands ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static grSim_Commands ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static grSim_Commands ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static grSim_Commands ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static grSim_Commands ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static grSim_Commands ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private grSim_Commands MakeReadOnly() {
    robotCommands_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(grSim_Commands prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<grSim_Commands, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(grSim_Commands cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private grSim_Commands result;
    
    private grSim_Commands PrepareBuilder() {
      if (resultIsReadOnly) {
        grSim_Commands original = result;
        result = new grSim_Commands();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override grSim_Commands MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::grSim_Commands.Descriptor; }
    }
    
    public override grSim_Commands DefaultInstanceForType {
      get { return global::grSim_Commands.DefaultInstance; }
    }
    
    public override grSim_Commands BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is grSim_Commands) {
        return MergeFrom((grSim_Commands) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(grSim_Commands other) {
      if (other == global::grSim_Commands.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasIsteamyellow) {
        Isteamyellow = other.Isteamyellow;
      }
      if (other.robotCommands_.Count != 0) {
        result.robotCommands_.Add(other.robotCommands_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_grSimCommandsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _grSimCommandsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 9: {
            result.hasTimestamp = input.ReadDouble(ref result.timestamp_);
            break;
          }
          case 16: {
            result.hasIsteamyellow = input.ReadBool(ref result.isteamyellow_);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.robotCommands_, global::grSim_Robot_Command.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTimestamp {
      get { return result.hasTimestamp; }
    }
    public double Timestamp {
      get { return result.Timestamp; }
      set { SetTimestamp(value); }
    }
    public Builder SetTimestamp(double value) {
      PrepareBuilder();
      result.hasTimestamp = true;
      result.timestamp_ = value;
      return this;
    }
    public Builder ClearTimestamp() {
      PrepareBuilder();
      result.hasTimestamp = false;
      result.timestamp_ = 0D;
      return this;
    }
    
    public bool HasIsteamyellow {
      get { return result.hasIsteamyellow; }
    }
    public bool Isteamyellow {
      get { return result.Isteamyellow; }
      set { SetIsteamyellow(value); }
    }
    public Builder SetIsteamyellow(bool value) {
      PrepareBuilder();
      result.hasIsteamyellow = true;
      result.isteamyellow_ = value;
      return this;
    }
    public Builder ClearIsteamyellow() {
      PrepareBuilder();
      result.hasIsteamyellow = false;
      result.isteamyellow_ = false;
      return this;
    }
    
    public pbc::IPopsicleList<global::grSim_Robot_Command> RobotCommandsList {
      get { return PrepareBuilder().robotCommands_; }
    }
    public int RobotCommandsCount {
      get { return result.RobotCommandsCount; }
    }
    public global::grSim_Robot_Command GetRobotCommands(int index) {
      return result.GetRobotCommands(index);
    }
    public Builder SetRobotCommands(int index, global::grSim_Robot_Command value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.robotCommands_[index] = value;
      return this;
    }
    public Builder SetRobotCommands(int index, global::grSim_Robot_Command.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.robotCommands_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRobotCommands(global::grSim_Robot_Command value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.robotCommands_.Add(value);
      return this;
    }
    public Builder AddRobotCommands(global::grSim_Robot_Command.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.robotCommands_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRobotCommands(scg::IEnumerable<global::grSim_Robot_Command> values) {
      PrepareBuilder();
      result.robotCommands_.Add(values);
      return this;
    }
    public Builder ClearRobotCommands() {
      PrepareBuilder();
      result.robotCommands_.Clear();
      return this;
    }
  }
  static grSim_Commands() {
    object.ReferenceEquals(global::GrSimCommands.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
